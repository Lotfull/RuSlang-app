//
//  WordsTableVC.swift
//  SlangApp
//
//  Created by Kam Lotfull on 02.02.17.
//  Copyright Â© 2017 Kam Lotfull. All rights reserved.
//

override func viewDidLoad() {
super.viewDidLoad()
let path = Bundle.main.path(forResource: "dict", ofType: "csv")
var words = parseCSV(path: path, encoding: String.Encoding.utf8)
words?.append(("a", "b", "c", "d", "e", "f", "g"))
print(words?.first ?? "EMPTY")
print(words?.last ?? "EMPTY")
}

func parseCSV (path: String?, encoding: String.Encoding) -> [(wordName:String, wordType:String, wordGroup: String, wordDefinition: String, wordExamples: String, wordHashtags: String, wordStory: String)]? {
// Load the CSV file and parse it
let delimiter = ","
var items = [(wordName:String, wordType:String, wordGroup: String, wordDefinition: String, wordExamples: String, wordHashtags: String, wordStory: String)]()

var content: String = ""

do {
content = try String(contentsOfFile: path!, encoding: String.Encoding.utf8)
} catch {
print("ERROR s. 19");
}
let lines:[String] = content.components(separatedBy: "\n") as [String]

for line in lines {
var values:[String] = []
if line != "" {
// For a line with double quotes
// we use NSScanner to perform the parsing
if line.range(of: "\"") != nil {
var textToScan:String = line
var value:NSString?
var textScanner:Scanner = Scanner(string: textToScan)
while textScanner.string != "" {

if (textScanner.string as NSString).substring(to: 1) == "\"" {
textScanner.scanLocation += 1
textScanner.scanUpTo("\"", into: &value)
textScanner.scanLocation += 1
} else {
textScanner.scanUpTo(delimiter, into: &value)
}

// Store the value into the values array
values.append(value as! String)

// Retrieve the unscanned remainder of the string
if textScanner.scanLocation < (textScanner.string).characters.count {
textToScan = (textScanner.string as NSString).substring(from: textScanner.scanLocation + 1)
} else {
textToScan = ""
}
textScanner = Scanner(string: textToScan)
}

// For a line without double quotes, we can simply separate the string
// by using the delimiter (e.g. comma)
} else  {
values = line.components(separatedBy: delimiter)
}

// Put the values into the tuple and add it to the items array[(wordName:String, wordType:String, wordGroup: String, wordDefinition: String, wordExamples: String, wordHashtags: String, wordStory: String)]?
let item = (values[0] ?? "nil",
values[1] ?? "nil",
values[3] ?? "nil",
values[4] ?? "nil",
values[5] ?? "nil",
values[6] ?? "nil",
values[7] ?? "nil")
/*
wordGroup: values[2],
wordDefinition: values[3],
wordExamples: values[4],
wordHashtags: values[5],
wordStory: values[6]
)*/
items.append(item)
}
}
return items
}

/*func parseCSV (contentsOfURL: URL, encoding: String.Encoding) -> [(wordName:String, wordType:String, wordGroup: String, wordDefinition: String, wordExamples: String, wordHashtags: String, wordStory: String)]? {
// Load the CSV file and parse it

let path = Bundle.main.path(forResource: "words", ofType: "csv")
let filemgr = FileManager.default

let separator = ","
var words:[(wordName:String, wordType:String, wordGroup: String, wordDefinition: String, wordExamples: String, wordHashtags: String, wordStory: String)]?

if filemgr.fileExists(atPath: path!) {
do {

let fullText = try String(contentsOfFile: path!, encoding: String.Encoding.utf8)

let lines = fullText.components(separatedBy: "\n") as [String]

for i in 1 ..< lines.count {
var values:[String] = []
if lines[i] != "" {
// For a line with double quotes
// we use NSScanner to perform the parsing
if lines[i].range(of: "\"") != nil {
var textToScan:String = lines[i]
var value:NSString?
var textScanner:Scanner = Scanner(string: textToScan)
while textScanner.string != "" {

if (textScanner.string as NSString).substring(to: 1) == "\"" {
textScanner.scanLocation += 1
textScanner.scanUpTo("\"", into: &value)
textScanner.scanLocation += 1
} else {
textScanner.scanUpTo(separator, into: &value)
}

// Store the value into the values array
values.append(value as! String)

// Retrieve the unscanned remainder of the string
if textScanner.scanLocation < textScanner.string.characters.count {
textToScan = (textScanner.string as NSString).substring(from: textScanner.scanLocation + 1)
} else {
textToScan = ""
}
textScanner = Scanner(string: textToScan)
}

// For a line without double quotes, we can simply separate the string
// by using the delimiter (e.g. comma)
} else  {
values = lines[i].components(separatedBy: separator)
}

// Put the values into the tuple and add it to the items arraywordName:String, wordType:String, wordGroup: String, wordDefinition: String, wordExamples: String, wordHashtags: String, wordStory: String
if let data = NSData(contentsOf: contentsOfURL) {
if NSString(data: data as Data, encoding: String.Encoding.utf8.rawValue) != nil {
let word = (wordName: values[0], wordType: values[1], wordGroup: values[2], wordDefinition: values[3], wordExamples: values[4], wordHashtags: values[5], wordStory: values[5])
words?.append(word)
}
}
}


}

} catch let error as NSError {
print("Error: \(error)")
}
}


/*
let content = String(contentsOfURL: contentsOfURL, encoding: encoding, error: error)
words = []
let lines:[String] = content.componentsSeparatedByCharactersInSet(NSCharacterSet.newlineCharacterSet()) as [String]

for line in lines {
var values:[String] = []
if line != "" {
// For a line with double quotes
// we use NSScanner to perform the parsing
if line.rangeOfString("\"") != nil {
var textToScan:String = line
var value:NSString?
var textScanner:NSScanner = NSScanner(string: textToScan)
while textScanner.string != "" {

if (textScanner.string as NSString).substringToIndex(1) == "\"" {
textScanner.scanLocation += 1
textScanner.scanUpToString("\"", intoString: &value)
textScanner.scanLocation += 1
} else {
textScanner.scanUpToString(separator, intoString: &value)
}

// Store the value into the values array
values.append(value as! String)

// Retrieve the unscanned remainder of the string
if textScanner.scanLocation < textScanner.string.characters.count {
textToScan = (textScanner.string as NSString).substringFromIndex(textScanner.scanLocation + 1)
} else {
textToScan = ""
}
textScanner = NSScanner(string: textToScan)
}

// For a line without double quotes, we can simply separate the string
// by using the delimiter (e.g. comma)
} else  {
values = line.componentsSeparatedByString(separator)
}

// Put the values into the tuple and add it to the items array
let station = (stationName: values[0], stationType: values[1], stationLineType: values[2], stationLatitude: values[3], stationLongitude: values[4])
words?.append(station)
}
}

let path = Bundle.main.path(forResource: "words", ofType: "csv")
let filemgr = FileManager.default
if filemgr.fileExists(atPath: path!) {
do {

let fullText = try String(contentsOfFile: path!, encoding: String.Encoding.utf8)

let readings = fullText.components(separatedBy: "\n") as [String]

for i in 1..<readings.count {
let wordData = readings[i].components(separatedBy: "\t")

//dictWords["]
}

} catch let error as NSError {
print("Error: \(error)")
}
}

*/

return words
}*/

